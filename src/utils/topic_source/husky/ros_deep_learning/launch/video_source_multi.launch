import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import numpy as np

class MultiCameraDisplay(Node):
    def __init__(self):
        super().__init__('multi_camera_display')
        self.bridge = CvBridge()

        self.subscribers = []
        self.frames = {}
        
        for i in range(1, 7):
            topic = f'/camera_{i}/raw'
            self.subscribers.append(
                self.create_subscription(Image, topic, self.create_callback(i), 10)
            )
            self.frames[i] = None

        self.timer = self.create_timer(0.1, self.display_frames)

    def create_callback(self, cam_id):
        def callback(msg):
            self.frames[cam_id] = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        return callback

    def display_frames(self):
        frame_list = [self.frames[i] for i in range(1, 7)]
        if all(frame is not None for frame in frame_list):
            # Combine the frames into a 3x2 grid
            top_row = np.hstack(frame_list[:3])
            bottom_row = np.hstack(frame_list[3:])
            combined_frame = np.vstack((top_row, bottom_row))

            cv2.imshow('Multi Camera Display', combined_frame)
            cv2.waitKey(1)

def main(args=None):
    rclpy.init(args=args)
    node = MultiCameraDisplay()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
